+ echo Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-05-05_17-30-37
Logging output to experiments/logs/faster_rcnn_end2end_VGG16_.txt.2017-05-05_17-30-37
+ python ./tools/train_net.py --device gpu --device_id 0 --weights data/pretrain_model/VGG_imagenet.npy --imdb voc_2007_trainval --iters 2 --cfg experiments/cfgs/faster_rcnn_end2end.yml --network VGGnet_train
voc_2007_train
voc_2007_val
voc_2007_trainval
voc_2007_test
kitti_train
kitti_val
kitti_trainval
kitti_test
nthu_71
nthu_370
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', device='gpu', device_id=0, imdb_name='voc_2007_trainval', max_iters=2, network_name='VGGnet_train', pretrained_model='data/pretrain_model/VGG_imagenet.npy', randomize=False, set_cfgs=None, solver=None)
Using config:
{'DATA_DIR': '/home/krohitm/code/Faster-RCNN_TF/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'IS_MULTISCALE': False,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/krohitm/code/Faster-RCNN_TF/models/pascal_voc',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/krohitm/code/Faster-RCNN_TF',
 'TEST': {'BBOX_REG': True,
          'DEBUG_TIMELINE': False,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'DEBUG_TIMELINE': False,
           'DISPLAY': 10,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.001,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 16,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_PREFIX': 'VGGnet_fast_rcnn',
           'STEPSIZE': 50000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
<bound method pascal_voc.default_roidb of <datasets.pascal_voc.pascal_voc object at 0x7f758b863f90>>
Loaded dataset `voc_2007_trainval` for training
Appending horizontally-flipped training examples...
voc_2007_trainval gt roidb loaded from /home/krohitm/code/Faster-RCNN_TF/data/cache/voc_2007_trainval_gt_roidb.pkl
done
Preparing training data...
done
Output will be saved to `/home/krohitm/code/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval`
/gpu:0
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("rpn_conv/3x3/rpn_conv/3x3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_cls_prob:0", shape=(?, ?, ?, ?), dtype=float32)
Tensor("rpn_cls_prob_reshape:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_bbox_pred/rpn_bbox_pred:0", shape=(?, ?, ?, 36), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("rpn_rois:0", shape=(?, 5), dtype=float32)
Tensor("Placeholder_2:0", shape=(?, 5), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
(<tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>, <tf.Tensor 'roi-data/Cast:0' shape=<unknown> dtype=int32>, <tf.Tensor 'roi-data/PyFunc:2' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:3' shape=<unknown> dtype=float32>, <tf.Tensor 'roi-data/PyFunc:4' shape=<unknown> dtype=float32>)
[<tf.Tensor 'conv5_3/conv5_3:0' shape=(?, ?, ?, 512) dtype=float32>, <tf.Tensor 'roi-data/rois:0' shape=(?, 5) dtype=float32>]
Tensor("drop7/mul:0", shape=(?, 4096), dtype=float32)
Use network `VGGnet_train` in training
Filtered 0 roidb entries: 10022 -> 10022
2017-05-05 17:30:44.120070: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2017-05-05 17:30:44.120115: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-05-05 17:30:44.120124: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2017-05-05 17:30:44.391859: I tensorflow/core/common_runtime/gpu/gpu_device.cc:887] Found device 0 with properties: 
name: TITAN X (Pascal)
major: 6 minor: 1 memoryClockRate (GHz) 1.531
pciBusID 0000:03:00.0
Total memory: 11.90GiB
Free memory: 10.64GiB
2017-05-05 17:30:44.391905: I tensorflow/core/common_runtime/gpu/gpu_device.cc:908] DMA: 0 
2017-05-05 17:30:44.391914: I tensorflow/core/common_runtime/gpu/gpu_device.cc:918] 0:   Y 
2017-05-05 17:30:44.391931: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:0) -> (device: 0, name: TITAN X (Pascal), pci bus id: 0000:03:00.0)
Computing bounding-box regression targets...
bbox target means:
[[ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]
 [ 0.  0.  0.  0.]]
[ 0.  0.  0.  0.]
bbox target stdevs:
[[ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]
 [ 0.1  0.1  0.2  0.2]]
[ 0.1  0.1  0.2  0.2]
Normalizing targets
done
Solving...
/home/krohitm/anaconda2/lib/python2.7/site-packages/tensorflow/python/ops/gradients_impl.py:93: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.
  "Converting sparse IndexedSlices to a dense Tensor of unknown shape. "
Loading pretrained model weights from data/pretrain_model/VGG_imagenet.npy
assign pretrain model weights to conv5_1
assign pretrain model biases to conv5_1
assign pretrain model weights to fc6
assign pretrain model biases to fc6
assign pretrain model weights to conv5_3
assign pretrain model biases to conv5_3
assign pretrain model weights to fc7
assign pretrain model biases to fc7
ignore fc8
ignore fc8
assign pretrain model weights to conv5_2
assign pretrain model biases to conv5_2
assign pretrain model weights to conv4_1
assign pretrain model biases to conv4_1
assign pretrain model weights to conv4_2
assign pretrain model biases to conv4_2
assign pretrain model weights to conv4_3
assign pretrain model biases to conv4_3
assign pretrain model weights to conv3_3
assign pretrain model biases to conv3_3
assign pretrain model weights to conv3_2
assign pretrain model biases to conv3_2
assign pretrain model weights to conv3_1
assign pretrain model biases to conv3_1
assign pretrain model weights to conv1_1
assign pretrain model biases to conv1_1
assign pretrain model weights to conv1_2
assign pretrain model biases to conv1_2
assign pretrain model weights to conv2_2
assign pretrain model biases to conv2_2
assign pretrain model weights to conv2_1
assign pretrain model biases to conv2_1
Wrote snapshot to: /home/krohitm/code/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_2.ckpt
done solving

real	0m37.601s
user	0m22.904s
sys	0m10.708s
+ set +x
+ python ./tools/test_net.py --device gpu --device_id 0 --weights /home/krohitm/code/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_2.ckpt --imdb voc_2007_test --cfg experiments/cfgs/faster_rcnn_end2end.yml --network VGGnet_test
voc_2007_train
voc_2007_val
voc_2007_trainval
voc_2007_test
kitti_train
kitti_val
kitti_trainval
kitti_test
nthu_71
nthu_370
Called with args:
Namespace(cfg_file='experiments/cfgs/faster_rcnn_end2end.yml', comp_mode=False, device='gpu', device_id=0, imdb_name='voc_2007_test', model='/home/krohitm/code/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_2.ckpt', network_name='VGGnet_test', prototxt=None, wait=True)
Using config:
{'DATA_DIR': '/home/krohitm/code/Faster-RCNN_TF/data',
 'DEDUP_BOXES': 0.0625,
 'EPS': 1e-14,
 'EXP_DIR': 'faster_rcnn_end2end',
 'GPU_ID': 0,
 'IS_MULTISCALE': False,
 'MATLAB': 'matlab',
 'MODELS_DIR': '/home/krohitm/code/Faster-RCNN_TF/models/pascal_voc',
 'PIXEL_MEANS': array([[[ 102.9801,  115.9465,  122.7717]]]),
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/krohitm/code/Faster-RCNN_TF',
 'TEST': {'BBOX_REG': True,
          'DEBUG_TIMELINE': False,
          'HAS_RPN': True,
          'MAX_SIZE': 1000,
          'NMS': 0.3,
          'PROPOSAL_METHOD': 'selective_search',
          'RPN_MIN_SIZE': 16,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 300,
          'RPN_PRE_NMS_TOP_N': 6000,
          'SCALES': [600],
          'SVM': False},
 'TRAIN': {'ASPECT_GROUPING': True,
           'BATCH_SIZE': 128,
           'BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'BBOX_NORMALIZE_MEANS': [0.0, 0.0, 0.0, 0.0],
           'BBOX_NORMALIZE_STDS': [0.1, 0.1, 0.2, 0.2],
           'BBOX_NORMALIZE_TARGETS': True,
           'BBOX_NORMALIZE_TARGETS_PRECOMPUTED': True,
           'BBOX_REG': True,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'DEBUG_TIMELINE': False,
           'DISPLAY': 10,
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'GAMMA': 0.1,
           'HAS_RPN': True,
           'IMS_PER_BATCH': 1,
           'LEARNING_RATE': 0.001,
           'MAX_SIZE': 1000,
           'MOMENTUM': 0.9,
           'PROPOSAL_METHOD': 'gt',
           'RPN_BATCHSIZE': 256,
           'RPN_BBOX_INSIDE_WEIGHTS': [1.0, 1.0, 1.0, 1.0],
           'RPN_CLOBBER_POSITIVES': False,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 16,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POSITIVE_WEIGHT': -1.0,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'SCALES': [600],
           'SNAPSHOT_INFIX': '',
           'SNAPSHOT_ITERS': 5000,
           'SNAPSHOT_PREFIX': 'VGGnet_fast_rcnn',
           'STEPSIZE': 50000,
           'USE_FLIPPED': True,
           'USE_PREFETCH': False},
 'USE_GPU_NMS': True}
<bound method pascal_voc.default_roidb of <datasets.pascal_voc.pascal_voc object at 0x7fd5392adb50>>
/gpu:0
Tensor("Placeholder:0", shape=(?, ?, ?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_conv/3x3/rpn_conv/3x3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rpn_cls_score/rpn_cls_score:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_cls_prob:0", shape=(?, ?, ?, ?), dtype=float32)
Tensor("rpn_cls_prob_reshape:0", shape=(?, ?, ?, 18), dtype=float32)
Tensor("rpn_bbox_pred/rpn_bbox_pred:0", shape=(?, ?, ?, 36), dtype=float32)
Tensor("Placeholder_1:0", shape=(?, 3), dtype=float32)
Tensor("conv5_3/conv5_3:0", shape=(?, ?, ?, 512), dtype=float32)
Tensor("rois:0", shape=(?, 5), dtype=float32)
[<tf.Tensor 'conv5_3/conv5_3:0' shape=(?, ?, ?, 512) dtype=float32>, <tf.Tensor 'rois:0' shape=(?, 5) dtype=float32>]
Tensor("fc7/fc7:0", shape=(?, 4096), dtype=float32)
Use network `VGGnet_test` in training
2017-05-05 17:31:17.605344: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.
2017-05-05 17:31:17.605388: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.
2017-05-05 17:31:17.605397: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.
2017-05-05 17:31:17.878535: I tensorflow/core/common_runtime/gpu/gpu_device.cc:887] Found device 0 with properties: 
name: TITAN X (Pascal)
major: 6 minor: 1 memoryClockRate (GHz) 1.531
pciBusID 0000:03:00.0
Total memory: 11.90GiB
Free memory: 10.64GiB
2017-05-05 17:31:17.878593: I tensorflow/core/common_runtime/gpu/gpu_device.cc:908] DMA: 0 
2017-05-05 17:31:17.878614: I tensorflow/core/common_runtime/gpu/gpu_device.cc:918] 0:   Y 
2017-05-05 17:31:17.878631: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:0) -> (device: 0, name: TITAN X (Pascal), pci bus id: 0000:03:00.0)
Loading model weights from /home/krohitm/code/Faster-RCNN_TF/output/faster_rcnn_end2end/voc_2007_trainval/VGGnet_fast_rcnn_iter_2.ckpt
im_detect: 1/4952 1.594s 0.006s
im_detect: 2/4952 1.144s 0.004s
im_detect: 3/4952 0.978s 0.004s
im_detect: 4/4952 0.892s 0.004s
im_detect: 5/4952 0.733s 0.004s
im_detect: 6/4952 0.628s 0.005s
im_detect: 7/4952 0.636s 0.005s
im_detect: 8/4952 0.647s 0.005s
im_detect: 9/4952 0.585s 0.005s
im_detect: 10/4952 0.597s 0.005s
im_detect: 11/4952 0.550s 0.005s
im_detect: 12/4952 0.511s 0.005s
im_detect: 13/4952 0.525s 0.005s
im_detect: 14/4952 0.495s 0.005s
im_detect: 15/4952 0.498s 0.005s
im_detect: 16/4952 0.505s 0.005s
im_detect: 17/4952 0.500s 0.005s
im_detect: 18/4952 0.501s 0.005s
im_detect: 19/4952 0.479s 0.005s
im_detect: 20/4952 0.459s 0.005s
im_detect: 21/4952 0.442s 0.005s
im_detect: 22/4952 0.446s 0.005s
im_detect: 23/4952 0.430s 0.005s
im_detect: 24/4952 0.442s 0.005s
im_detect: 25/4952 0.427s 0.005s
im_detect: 26/4952 0.414s 0.005s
im_detect: 27/4952 0.402s 0.005s
im_detect: 28/4952 0.402s 0.005s
im_detect: 29/4952 0.391s 0.005s
im_detect: 30/4952 0.381s 0.005s
im_detect: 31/4952 0.372s 0.005s
im_detect: 32/4952 0.363s 0.005s
im_detect: 33/4952 0.376s 0.005s
im_detect: 34/4952 0.368s 0.005s
im_detect: 35/4952 0.360s 0.005s
im_detect: 36/4952 0.352s 0.005s
im_detect: 37/4952 0.345s 0.005s
im_detect: 38/4952 0.339s 0.005s
im_detect: 39/4952 0.348s 0.005s
im_detect: 40/4952 0.341s 0.005s
im_detect: 41/4952 0.342s 0.005s
im_detect: 42/4952 0.336s 0.005s
im_detect: 43/4952 0.330s 0.005s
im_detect: 44/4952 0.324s 0.005s
im_detect: 45/4952 0.329s 0.005s
im_detect: 46/4952 0.324s 0.005s
im_detect: 47/4952 0.319s 0.005s
im_detect: 48/4952 0.315s 0.005s
im_detect: 49/4952 0.310s 0.005s
im_detect: 50/4952 0.306s 0.005s
im_detect: 51/4952 0.302s 0.005s
im_detect: 52/4952 0.306s 0.005s
im_detect: 53/4952 0.302s 0.005s
im_detect: 54/4952 0.298s 0.005s
im_detect: 55/4952 0.308s 0.005s
im_detect: 56/4952 0.304s 0.005s
im_detect: 57/4952 0.300s 0.005s
im_detect: 58/4952 0.297s 0.005s
im_detect: 59/4952 0.293s 0.005s
im_detect: 60/4952 0.290s 0.005s
im_detect: 61/4952 0.286s 0.005s
im_detect: 62/4952 0.283s 0.005s
im_detect: 63/4952 0.280s 0.005s
im_detect: 64/4952 0.277s 0.005s
im_detect: 65/4952 0.274s 0.005s
im_detect: 66/4952 0.279s 0.005s
im_detect: 67/4952 0.276s 0.005s
im_detect: 68/4952 0.282s 0.005s
im_detect: 69/4952 0.279s 0.005s
im_detect: 70/4952 0.276s 0.005s
im_detect: 71/4952 0.274s 0.005s
im_detect: 72/4952 0.271s 0.005s
im_detect: 73/4952 0.269s 0.005s
im_detect: 74/4952 0.275s 0.005s
im_detect: 75/4952 0.280s 0.005s
im_detect: 76/4952 0.277s 0.005s
im_detect: 77/4952 0.275s 0.005s
im_detect: 78/4952 0.272s 0.005s
im_detect: 79/4952 0.277s 0.005s
im_detect: 80/4952 0.279s 0.005s
im_detect: 81/4952 0.276s 0.005s
im_detect: 82/4952 0.274s 0.005s
im_detect: 83/4952 0.275s 0.005s
im_detect: 84/4952 0.277s 0.005s
im_detect: 85/4952 0.274s 0.004s
im_detect: 86/4952 0.272s 0.004s
im_detect: 87/4952 0.274s 0.004s
im_detect: 88/4952 0.272s 0.004s
im_detect: 89/4952 0.270s 0.004s
im_detect: 90/4952 0.268s 0.005s
im_detect: 91/4952 0.266s 0.004s
im_detect: 92/4952 0.264s 0.005s
im_detect: 93/4952 0.267s 0.005s
im_detect: 94/4952 0.270s 0.005s
im_detect: 95/4952 0.275s 0.004s
im_detect: 96/4952 0.273s 0.005s
im_detect: 97/4952 0.271s 0.004s
im_detect: 98/4952 0.269s 0.005s
im_detect: 99/4952 0.268s 0.005s
im_detect: 100/4952 0.272s 0.005s
im_detect: 101/4952 0.276s 0.004s
im_detect: 102/4952 0.274s 0.004s
im_detect: 103/4952 0.272s 0.005s
im_detect: 104/4952 0.270s 0.005s
im_detect: 105/4952 0.269s 0.005s
im_detect: 106/4952 0.267s 0.005s
im_detect: 107/4952 0.265s 0.005s
im_detect: 108/4952 0.264s 0.005s
im_detect: 109/4952 0.262s 0.005s
im_detect: 110/4952 0.261s 0.005s
im_detect: 111/4952 0.259s 0.005s
im_detect: 112/4952 0.262s 0.005s
im_detect: 113/4952 0.260s 0.005s
im_detect: 114/4952 0.258s 0.005s
im_detect: 115/4952 0.262s 0.005s
im_detect: 116/4952 0.265s 0.005s
im_detect: 117/4952 0.264s 0.005s
im_detect: 118/4952 0.262s 0.005s
im_detect: 119/4952 0.261s 0.005s
im_detect: 120/4952 0.260s 0.005s
im_detect: 121/4952 0.258s 0.005s
im_detect: 122/4952 0.257s 0.005s
im_detect: 123/4952 0.255s 0.005s
im_detect: 124/4952 0.254s 0.005s
im_detect: 125/4952 0.253s 0.005s
im_detect: 126/4952 0.252s 0.005s
im_detect: 127/4952 0.250s 0.005s
im_detect: 128/4952 0.249s 0.005s
im_detect: 129/4952 0.248s 0.005s
im_detect: 130/4952 0.247s 0.005s
im_detect: 131/4952 0.245s 0.005s
im_detect: 132/4952 0.244s 0.005s
im_detect: 133/4952 0.248s 0.005s
im_detect: 134/4952 0.247s 0.005s
im_detect: 135/4952 0.246s 0.005s
im_detect: 136/4952 0.244s 0.005s
im_detect: 137/4952 0.243s 0.005s
im_detect: 138/4952 0.242s 0.005s
im_detect: 139/4952 0.241s 0.005s
im_detect: 140/4952 0.240s 0.005s
im_detect: 141/4952 0.242s 0.005s
im_detect: 142/4952 0.241s 0.005s
im_detect: 143/4952 0.240s 0.005s
im_detect: 144/4952 0.239s 0.005s
im_detect: 145/4952 0.238s 0.005s
im_detect: 146/4952 0.237s 0.005s
im_detect: 147/4952 0.236s 0.005s
im_detect: 148/4952 0.235s 0.005s
im_detect: 149/4952 0.234s 0.005s
im_detect: 150/4952 0.236s 0.005s
im_detect: 151/4952 0.235s 0.005s
im_detect: 152/4952 0.234s 0.005s
im_detect: 153/4952 0.233s 0.005s
im_detect: 154/4952 0.232s 0.005s
im_detect: 155/4952 0.231s 0.005s
im_detect: 156/4952 0.230s 0.005s
im_detect: 157/4952 0.230s 0.005s
im_detect: 158/4952 0.229s 0.005s
im_detect: 159/4952 0.228s 0.005s
im_detect: 160/4952 0.227s 0.005s
im_detect: 161/4952 0.226s 0.005s
im_detect: 162/4952 0.225s 0.005s
im_detect: 163/4952 0.224s 0.004s
im_detect: 164/4952 0.227s 0.004s
im_detect: 165/4952 0.226s 0.004s
im_detect: 166/4952 0.225s 0.004s
im_detect: 167/4952 0.225s 0.004s
im_detect: 168/4952 0.228s 0.004s
im_detect: 169/4952 0.227s 0.005s
im_detect: 170/4952 0.226s 0.004s
im_detect: 171/4952 0.225s 0.004s
im_detect: 172/4952 0.224s 0.004s
im_detect: 173/4952 0.223s 0.004s
im_detect: 174/4952 0.224s 0.004s
im_detect: 175/4952 0.223s 0.004s
im_detect: 176/4952 0.222s 0.004s
im_detect: 177/4952 0.221s 0.004s
im_detect: 178/4952 0.223s 0.004s
im_detect: 179/4952 0.223s 0.004s
im_detect: 180/4952 0.222s 0.004s
im_detect: 181/4952 0.221s 0.004s
im_detect: 182/4952 0.220s 0.004s
im_detect: 183/4952 0.223s 0.004s
im_detect: 184/4952 0.222s 0.004s
im_detect: 185/4952 0.221s 0.004s
im_detect: 186/4952 0.221s 0.004s
im_detect: 187/4952 0.220s 0.004s
im_detect: 188/4952 0.219s 0.004s
im_detect: 189/4952 0.219s 0.004s
im_detect: 190/4952 0.218s 0.005s
im_detect: 191/4952 0.217s 0.005s
im_detect: 192/4952 0.217s 0.005s
im_detect: 193/4952 0.216s 0.005s
im_detect: 194/4952 0.215s 0.005s
im_detect: 195/4952 0.215s 0.005s
im_detect: 196/4952 0.214s 0.005s
im_detect: 197/4952 0.216s 0.005s
im_detect: 198/4952 0.219s 0.005s
im_detect: 199/4952 0.218s 0.005s
im_detect: 200/4952 0.217s 0.005s
im_detect: 201/4952 0.217s 0.005s
im_detect: 202/4952 0.218s 0.005s
im_detect: 203/4952 0.218s 0.005s
im_detect: 204/4952 0.217s 0.005s
im_detect: 205/4952 0.217s 0.005s
im_detect: 206/4952 0.219s 0.005s
im_detect: 207/4952 0.219s 0.005s
im_detect: 208/4952 0.218s 0.005s
im_detect: 209/4952 0.217s 0.005s
im_detect: 210/4952 0.217s 0.005s
im_detect: 211/4952 0.216s 0.005s
im_detect: 212/4952 0.215s 0.005s
im_detect: 213/4952 0.215s 0.005s
im_detect: 214/4952 0.214s 0.005s
im_detect: 215/4952 0.215s 0.005s
im_detect: 216/4952 0.215s 0.005s
im_detect: 217/4952 0.214s 0.005s
im_detect: 218/4952 0.214s 0.005s
im_detect: 219/4952 0.213s 0.005s
im_detect: 220/4952 0.212s 0.005s
im_detect: 221/4952 0.214s 0.005s
im_detect: 222/4952 0.214s 0.005s
im_detect: 223/4952 0.213s 0.005s
im_detect: 224/4952 0.213s 0.005s
im_detect: 225/4952 0.212s 0.005s
im_detect: 226/4952 0.212s 0.005s
im_detect: 227/4952 0.211s 0.005s
im_detect: 228/4952 0.214s 0.005s
im_detect: 229/4952 0.213s 0.005s
im_detect: 230/4952 0.212s 0.005s
im_detect: 231/4952 0.212s 0.005s
im_detect: 232/4952 0.211s 0.005s
im_detect: 233/4952 0.211s 0.004s
im_detect: 234/4952 0.210s 0.004s
im_detect: 235/4952 0.210s 0.004s
im_detect: 236/4952 0.209s 0.004s
im_detect: 237/4952 0.209s 0.004s
im_detect: 238/4952 0.208s 0.004s
im_detect: 239/4952 0.208s 0.004s
im_detect: 240/4952 0.207s 0.004s
im_detect: 241/4952 0.207s 0.004s
im_detect: 242/4952 0.206s 0.004s
im_detect: 243/4952 0.206s 0.004s
im_detect: 244/4952 0.205s 0.004s
im_detect: 245/4952 0.205s 0.004s
im_detect: 246/4952 0.206s 0.004s
im_detect: 247/4952 0.205s 0.004s
im_detect: 248/4952 0.205s 0.004s
im_detect: 249/4952 0.204s 0.004s
im_detect: 250/4952 0.204s 0.004s
im_detect: 251/4952 0.203s 0.004s
im_detect: 252/4952 0.205s 0.004s
im_detect: 253/4952 0.205s 0.004s
im_detect: 254/4952 0.206s 0.004s
im_detect: 255/4952 0.206s 0.004s
im_detect: 256/4952 0.207s 0.004s
im_detect: 257/4952 0.206s 0.004s
im_detect: 258/4952 0.206s 0.004s
im_detect: 259/4952 0.205s 0.004s
im_detect: 260/4952 0.205s 0.004s
im_detect: 261/4952 0.204s 0.004s
im_detect: 262/4952 0.204s 0.004s
im_detect: 263/4952 0.203s 0.004s
im_detect: 264/4952 0.203s 0.004s
im_detect: 265/4952 0.203s 0.005s
im_detect: 266/4952 0.202s 0.004s
im_detect: 267/4952 0.202s 0.004s
im_detect: 268/4952 0.203s 0.004s
im_detect: 269/4952 0.204s 0.004s
im_detect: 270/4952 0.203s 0.004s
im_detect: 271/4952 0.203s 0.004s
im_detect: 272/4952 0.202s 0.004s
im_detect: 273/4952 0.202s 0.004s
im_detect: 274/4952 0.201s 0.004s
im_detect: 275/4952 0.201s 0.005s
im_detect: 276/4952 0.201s 0.004s
im_detect: 277/4952 0.202s 0.004s
im_detect: 278/4952 0.201s 0.004s
im_detect: 279/4952 0.201s 0.004s
im_detect: 280/4952 0.200s 0.004s
im_detect: 281/4952 0.202s 0.004s
im_detect: 282/4952 0.202s 0.004s
im_detect: 283/4952 0.202s 0.004s
im_detect: 284/4952 0.201s 0.004s
im_detect: 285/4952 0.201s 0.004s
im_detect: 286/4952 0.200s 0.004s
im_detect: 287/4952 0.200s 0.004s
im_detect: 288/4952 0.201s 0.004s
im_detect: 289/4952 0.201s 0.004s
im_detect: 290/4952 0.201s 0.004s
im_detect: 291/4952 0.201s 0.004s
im_detect: 292/4952 0.200s 0.005s
im_detect: 293/4952 0.202s 0.005s
im_detect: 294/4952 0.204s 0.005s
im_detect: 295/4952 0.204s 0.004s
im_detect: 296/4952 0.203s 0.005s
im_detect: 297/4952 0.203s 0.005s
im_detect: 298/4952 0.203s 0.005s
im_detect: 299/4952 0.202s 0.004s
im_detect: 300/4952 0.202s 0.005s
im_detect: 301/4952 0.201s 0.005s
im_detect: 302/4952 0.201s 0.005s
im_detect: 303/4952 0.201s 0.004s
im_detect: 304/4952 0.200s 0.005s
im_detect: 305/4952 0.200s 0.004s
im_detect: 306/4952 0.200s 0.005s
im_detect: 307/4952 0.199s 0.004s
im_detect: 308/4952 0.199s 0.005s
im_detect: 309/4952 0.201s 0.005s
im_detect: 310/4952 0.200s 0.005s
im_detect: 311/4952 0.200s 0.004s
im_detect: 312/4952 0.199s 0.004s
im_detect: 313/4952 0.199s 0.004s
im_detect: 314/4952 0.199s 0.004s
im_detect: 315/4952 0.198s 0.004s
im_detect: 316/4952 0.198s 0.005s
im_detect: 317/4952 0.199s 0.005s
im_detect: 318/4952 0.199s 0.005s
im_detect: 319/4952 0.199s 0.005s
im_detect: 320/4952 0.198s 0.005s
im_detect: 321/4952 0.198s 0.005s
im_detect: 322/4952 0.199s 0.005s
im_detect: 323/4952 0.199s 0.005s
im_detect: 324/4952 0.199s 0.004s
im_detect: 325/4952 0.198s 0.004s
im_detect: 326/4952 0.198s 0.004s
im_detect: 327/4952 0.198s 0.004s
im_detect: 328/4952 0.197s 0.004s
im_detect: 329/4952 0.197s 0.005s
im_detect: 330/4952 0.197s 0.005s
im_detect: 331/4952 0.196s 0.004s
im_detect: 332/4952 0.196s 0.004s
im_detect: 333/4952 0.196s 0.005s
im_detect: 334/4952 0.195s 0.004s
im_detect: 335/4952 0.195s 0.004s
im_detect: 336/4952 0.195s 0.005s
im_detect: 337/4952 0.195s 0.005s
im_detect: 338/4952 0.194s 0.005s
im_detect: 339/4952 0.194s 0.005s
im_detect: 340/4952 0.194s 0.005s
im_detect: 341/4952 0.193s 0.005s
im_detect: 342/4952 0.195s 0.005s
im_detect: 343/4952 0.195s 0.005s
